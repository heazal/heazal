//----------------------------------------------------------- BIBLIOTECAS
#include <stdio.h>
#include <stdlib.h>
#include <allegro5/allegro.h>
#include <allegro5/allegro_image.h>
#include <time.h>

//----------------------------------------------------------- MEDIDAS
const float FPS = 70;

const int SCREEN_W = 495;

const int SCREEN_H = 495;

const int METEORO_ALTURA = 50;

const int METEORO_LARGURA = 57;

const int ASTROD_LARGURA = 62;

const int ASTROD_ALTURA = 62;

const int ASTROE_LARGURA = 62;

const int ASTROE_ALTURA = 62;

//------------------------------------------------------------ INÍCIO DO CÓDIGO DO JOGO

int main(int argc, char **argv)
{
//------------------------------------------------------------ ****DECLARAÇÃO**** ------------------------------------------------------------
    int i;
    srand(time(NULL));

    ALLEGRO_DISPLAY *display = NULL;
    ALLEGRO_EVENT_QUEUE *event_queue = NULL;
    ALLEGRO_TIMER *timer = NULL;

// ERRO DE CRIAÇÃO
    if(!al_init())
    {
        fprintf(stderr, "failed to initialize allegro!\n");
        return -1;
    }
    timer = al_create_timer(1.0 / FPS);

    if(!timer)
    {
        fprintf(stderr, "failed to create timer!\n");
        return -1;
    }

    bool redraw = true;
    al_set_new_display_flags(ALLEGRO_OPENGL | ALLEGRO_WINDOWED);
    display = al_create_display(SCREEN_W, SCREEN_H);

    if(!display)
    {
        fprintf(stderr, "failed to create display!\n");
        al_destroy_timer(timer);
        return -1;
    }

    if(!al_install_keyboard())
    {
        fprintf(stderr, "failed to initialize the keyboard!\n");
        return -1;
    }

    if(!al_install_mouse())
    {
        fprintf(stderr, "failed to initialize the mouse!\n");
        return -1;
    }

    if(!al_init_image_addon())
    {
        fprintf(stderr, "failed to initialize the image addon!\n");
        return -1;
    }

// CRIAR PONTEIRO DAS IMAGENS = VARIAVEIS ALLEGRO = cria o endereço da imagem
    ALLEGRO_BITMAP *meteoro = NULL;
    ALLEGRO_BITMAP *astrod = NULL;
    ALLEGRO_BITMAP *astroe = NULL;
    ALLEGRO_BITMAP *marte = NULL;

//------------------------------------------------------------ METEORO ------------------------------------------------------------
    struct meteoroobj
    {
        float pos_x ;
        float pos_y;
        float vx;
        float vy;
        bool ativo;

    } met[5];

    for (i=0; i<5; i++)
    {
        met[i].ativo=false;
    }
//------------------------------------------------------------ ASTRO ------------------------------------------------------------
    float astrod_pos_x = 0;
    float astrod_pos_y = SCREEN_H / 2.0 - ASTROD_ALTURA / 2.0;
    float astrod_vy = 0;
    float astrod_vx = 0;

    bool astrod_ativo = true;
    bool astroe_ativo = false;

    float astroe_pos_x = 0;
    float astroe_pos_y = SCREEN_H / 2.0 - ASTROE_ALTURA / 2.0;
    float astroe_vy = 0;
    float astroe_vx = 0;

//------------------------------------------------------------ CARREGA AS IMAGENS EM PNG ------------------------------------------------------------
    meteoro =  al_load_bitmap("imagens/meteoro.png");
    astrod = al_load_bitmap("imagens/astrod.png");
    astroe = al_load_bitmap("imagens/astroe.png");
    marte = al_load_bitmap("imagens/marte.png");

//------------------------------------------------------------ METEORO ------------------------------------------------------------
//ERRO NA CRIAÇÃO
    if(!meteoro)
    {
        fprintf(stderr, "falhou ao criar a meteoro bitmap!\n");
        al_destroy_display(display);
        al_destroy_timer(timer);
        return -1;
    }
//------------------------------------------------------------ ASTRO ------------------------------------------------------------
// ERRO NA CRIAÇÃO
    if(!astrod)
    {
        fprintf(stderr, "falhou ao criar o astro bitmap!\n");
        al_destroy_display(display);
        al_destroy_timer(timer);
        al_destroy_bitmap(meteoro);
        return -1;
    }
    if(!astroe)
    {
        fprintf(stderr, "falhou ao criar o astro bitmap!\n");
        al_destroy_display(display);
        al_destroy_timer(timer);
        al_destroy_bitmap(meteoro);
        return -1;
    }

//------------------------------------------------------------ PAISAGEM: MARTE ------------------------------------------------------------
// ERRO NA CRIAÇÃO
    if(!marte)
    {
        fprintf(stderr, "falhou ao criar o background bitmap!\n");
        al_destroy_display(display);
        al_destroy_timer(timer);
        al_destroy_bitmap(meteoro);
        al_destroy_bitmap(astrod);
        al_destroy_bitmap(astroe);
        return -1;
    }


    al_set_target_bitmap(al_get_backbuffer(display));

    event_queue = al_create_event_queue();


//ERRRO DE CRIAÇÃO - event_queue = caso "erro", destruir meteoro, astrod, astroe, marte, display, timer
    if(!event_queue)
    {
        fprintf(stderr, "failed to create event_queue!\n");
        al_destroy_bitmap(meteoro);
        al_destroy_bitmap(astrod);
        al_destroy_bitmap(astroe);
        al_destroy_bitmap(marte);
        al_destroy_display(display);
        al_destroy_timer(timer);
        return -1;
    }

// REGISTRO -> é uma função do allegro
    al_register_event_source(event_queue, al_get_display_event_source(display));
    al_register_event_source(event_queue, al_get_timer_event_source(timer));
    al_register_event_source(event_queue, al_get_keyboard_event_source());
    al_register_event_source(event_queue, al_get_mouse_event_source());


    al_clear_to_color(al_map_rgb(0,0,0));

    al_flip_display();

    al_start_timer(timer);

//------------------------------------------------------------ ****ATUALIZAÇÃO E VALORES INICIAIS**** ------------------------------------------------------------

    while(1)
    {
        ALLEGRO_EVENT ev;
        al_wait_for_event(event_queue, &ev);


        if(ev.type == ALLEGRO_EVENT_TIMER)
        {
//------------------------------------------------------------ METEORO ------------------------------------------------------------
            for (i=0; i<5; i++)
            {
               if(met[i].ativo==false)
               {
                   met[i].pos_x = 100 + (rand()%495);
                   met[i].pos_y = 0;
                   met[i].vx = -1 + (rand()%-4);
                   met[i].vy = 2 + (rand()%8);
                   met[i].ativo = true;
                   break;
               }
            }

             for (i=0; i<5; i++)
             {
                if (met[i].pos_y > SCREEN_H)
                {
                    met[i].ativo = false;
                }
             }

//------------------------------------------------------------ ASTRO ------------------------------------------------------------
 //---------------------------- DIREITA

                if(astrod_pos_x < 0 )
                {
                    astrod_pos_x = 1;
                }

//---------------------------- ESQUERDA

                if(astroe_pos_y < 0 || astroe_pos_y > SCREEN_H - METEORO_ALTURA)
                {
                    astroe_vy = -astroe_vy;
                }

//------------------------------------------------------------ METEORO ------------------------------------------------------------
                for (i=0; i<5; i++)
                {
                met[i].pos_x               += met[i].vx;
                met[i].pos_y               += met[i].vy;
                }
//------------------------------------------------------------ ASTRO ------------------------------------------------------------
                astrod_pos_x                += astrod_vx;
                astrod_pos_y                += astrod_vy;
                astroe_pos_x                += astroe_vx;
                astroe_pos_y                += astroe_vy;
                redraw                       = true;

            }

//------------------------------------------------------------ ****MOVIMENTAÇÃO MANUAL ASTRO**** ------------------------------------------------------------
            else if(ev.type == ALLEGRO_EVENT_KEY_DOWN)
            {
                switch(ev.keyboard.keycode)
                {

                case ALLEGRO_KEY_UP:
                    astrod_vy=-4;
                    astroe_vy=-4;
                    break;

                case ALLEGRO_KEY_DOWN:
                    astrod_vy=4;
                    astroe_vy=4;
                    break;

                case ALLEGRO_KEY_RIGHT:
                    astrod_vx=4;
                    astroe_vx=4;
                    astrod_ativo = true;
                    astroe_ativo = false;
                    break;

                case ALLEGRO_KEY_LEFT:
                    astrod_vx=-4;
                    astroe_vx=-4;
                    astrod_ativo = false;
                    astroe_ativo = true;
                    break;

                case ALLEGRO_KEY_ESCAPE:
                    return 0;
                    break;
                }
            }
            else if(ev.type == ALLEGRO_EVENT_KEY_UP)
            {
                switch(ev.keyboard.keycode)
                {
                case ALLEGRO_KEY_UP:
                    astrod_vy=0;
                    astroe_vy=0;
                    break;

                case ALLEGRO_KEY_DOWN:
                    astrod_vy=0;
                    astroe_vy=0;
                    break;

                case ALLEGRO_KEY_LEFT:
                    astrod_vx=0;
                    astroe_vx=0;
                    astrod_ativo = false;
                    astroe_ativo = true;
                    break;

                case ALLEGRO_KEY_RIGHT:
                    astrod_vx=0;
                    astroe_vx=0;
                    astrod_ativo = true;
                    astroe_ativo = false;
                    break;

                }
            }

            else if(ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE)
            {
                break;
            }

//------------------------------------------------------------ ****GARREGAR OS DESENHOS**** ------------------------------------------------------------

            if(redraw && al_is_event_queue_empty(event_queue))
            {
                redraw = false;
                al_clear_to_color(al_map_rgb(0,100,0));
                al_draw_bitmap(marte, 0, 0, 0);

                if (astrod_ativo==true)
                {
                    al_draw_bitmap(astrod,astrod_pos_x, astrod_pos_y, 0);
                }
                if (astroe_ativo==true)
                {
                    al_draw_bitmap(astroe,astroe_pos_x, astroe_pos_y, 0);
                }
                for (i=0; i<5; i++)
                {
                if(met[i].ativo==true)
                {
                    al_draw_bitmap(meteoro, met[i].pos_x, met[i].pos_y, 0);
                }
                }
                al_flip_display();
            }
        }


        al_destroy_bitmap(meteoro);
        al_destroy_bitmap(astrod);
        al_destroy_bitmap(astroe);
        al_destroy_timer(timer);
        al_destroy_display(display);
        al_destroy_event_queue(event_queue);


        return 0;
    }
